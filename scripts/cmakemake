#!/bin/sh
set -e

case $1 in
install)
    DO_INSTALL=1
    shift
    ;;
esac

while [ $# -gt 0 ]; do
    OPT=$1

    case $OPT in
    -j|-D|-U|-G)
        shift
        OPT="$OPT$1"
        ;;
    esac

    case $OPT in
    -h|-\?|--help)
        cat <<E0
Usage: cmakemake [<build-options>] <project-dir>
  or   cmakemake install [--debug] <project-dir>

Build options:

  --debug               Debug build
  --release             Release build (default)
  --no-build            Generate project, but don't build
  --platform=<name>     Build for another platform (see below)
  --prefix=<path>       Set install prefix
  -j<cpu-count>         Set compiler job count
  -D<variable>=<value>  Define a cmake variable
  -U<variable>          Undefine a cmake variable
  -G<generator>         Use a cmake generator

Supported platforms:

  * (empty)             Build native binaries for current platform
  * Android             Build Android binaries (armeabi-v7a) (MSYS, Linux, OS X)
  * iOS                 Build iOS binaries (iphoneos+simulator) (OS X only)
  * Xcode               Build using Xcode (debug+release) (OS X only)


Build script for CMake projects.

This command wraps 'cmake && make' with some additional features:
  - Optimized release build by default, unless --debug or DEBUG=1
  - Out of source builds with debug and release built to separate folders
  - Paralell builds out of the box
  - MSYS/MinGW support (Windows only)
  - Xcode batch builds (OS X only)
  - iOS + Android cross builds

Additional arguments to cmake can be passed using environment variable CMAKE_ARGS.
E0
        exit 1
        ;;
    --debug)
        DEBUG=1
        ;;
    --release)
        DEBUG=0
        ;;
    --no-build)
        DO_BUILD=0
        ;;
    --platform=*)
        PLATFORM=`echo ${OPT:11} | tr '[:upper:]' '[:lower:]'`
        ;;
    --archs=*)
        ARCHS=${OPT:8}
        ;;
    --prefix=*)
        CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_INSTALL_PREFIX:PATH=${OPT:9}"
        ;;
    -D*|-U*|-G*)
        CMAKE_ARGS="$CMAKE_ARGS -${OPT:1}"
        ;;
    -j*)
        JOB_COUNT="${OPT:2}"
        ;;
    --)
        shift
        break
        ;;
    *)
        if [ $# -eq 1 ]; then
            break
        else
            echo "ERROR: Unable to parse arguments '$@'\n\nType \`cmakemake --help\` for usage." >&2
            exit 1
        fi
        ;;
    esac

    shift
done

PROJECT_DIR="$@"
set --

#echo "'$DO_INSTALL' '$DO_CLEAN' '$DO_BUILD' '$DEBUG' '$TARGET' '$JOB_COUNT' '$CMAKE_ARGS' '$PROJECT_DIR'" && exit 1

if [ -z "$PROJECT_DIR" ]; then
    echo "ERROR: No project directory specified.\n\nType \`cmakemake --help\` for usage." >&2
    exit 1
fi

cd "`dirname "$0"`/.."
XLI_DIR=`pwd -P` # Absolute path
cd "$OLDPWD"

cd "$PROJECT_DIR"
PROJECT_DIR=`pwd -P` # Absolute path

if [ "$DEBUG" = "1" ]; then
    BUILD_TYPE="Debug"
else
    BUILD_TYPE="Release"
fi

BUILD_DIR="build/$BUILD_TYPE"
CMAKE_ARGS="$CMAKE_ARGS -DCMAKE_BUILD_TYPE=$BUILD_TYPE"

if [ "$DO_INSTALL" = "1" ]; then
    cd "$BUILD_DIR"
    make install
    exit 0
fi

if ! which cmake > /dev/null 2>&1; then
    # This is sometimes needed when run from GUI applications on OS X
    PATH=$PATH:/opt/local/bin

    if ! which cmake > /dev/null 2>&1; then
        echo "ERROR: Unable to find the \`cmake\` command. Make sure CMake is installed and added to \$PATH." >&2
        exit 1
    fi
fi

if [ -z "$JOB_COUNT" ]; then
    if [ -f /proc/cpuinfo ]; then
        JOB_COUNT=`grep processor /proc/cpuinfo | wc -l`
    elif [ "`uname`" = "Darwin" ]; then
        JOB_COUNT=`sysctl hw.ncpu | cut -d " " -f 2`
    elif [ -n "$NUMBER_OF_PROCESSORS" ]; then
        JOB_COUNT=$NUMBER_OF_PROCESSORS
    else
        JOB_COUNT=1
    fi
fi

if [ "$DO_BUILD" != "0" ]; then
    case $DEBUG in
    0)
        CONFIGS="Release"
        ;;
    1)
        CONFIGS="Debug"
        ;;
    *)
        CONFIGS="Release Debug"
        ;;
    esac
else
    CONFIGS=""
fi

if [ -n "$PLATFORM" ]; then
    case $PLATFORM in
    xcode)
        mkdir -p build/Xcode
        cd build/Xcode

        cmake ../.. -GXcode $CMAKE_ARGS

        for cfg in $CONFIGS; do
            xcodebuild -alltargets -configuration "$cfg"
        done
        ;;
    ios)
        if [ -z "$ARCHS" ]; then
            ARCHS="OS SIMULATOR"
        fi

        for arch in $ARCHS; do
            mkdir -p "build/iOS/$arch"
            cd "build/iOS/$arch"

            cmake ../../.. $CMAKE_ARGS -GXcode -DCMAKE_TOOLCHAIN_FILE="$XLI_DIR/cmake/toolchain/iOS.cmake" -DIOS_PLATFORM="$arch"

            for cfg in $CONFIGS; do
                xcodebuild -alltargets -configuration "$cfg"
            done

            cd "$PROJECT_DIR"
        done
        ;;
    android)
        if ! which ndk-build > /dev/null 2>&1; then
            echo "ERROR: Unable to find the \`ndk-build\` command. Make sure the Android NDK is installed and added to \$PATH." >&2
            exit 1
        fi

        if [ -z "$ARCHS" ]; then
            ARCHS="armeabi-v7a" #"armeabi-v7a mips x86"
        fi

        for arch in $ARCHS; do
            BUILD_DIR="build/android/$BUILD_TYPE-$arch"

            mkdir -p "$BUILD_DIR"
            cd "$BUILD_DIR"

            NDK_FILENAME=`which ndk-build`
            NDK_DIR=`dirname "$NDK_FILENAME"`
            TOOLCHAIN_FILE="$XLI_DIR/cmake/toolchain/android.toolchain.cmake"

            set --

            if [ "$OSTYPE" = "msys" ]; then
                if [ -d "$NDK_DIR/prebuilt/windows-x86_64/bin" ]; then
                    MAKE_DIR="$NDK_DIR/prebuilt/windows-x86_64/bin"
                elif [ -d "$NDK_DIR/prebuilt/windows-x86_32/bin" ]; then
                    MAKE_DIR="$NDK_DIR/prebuilt/windows-x86_32/bin"
                else
                    MAKE_DIR="$NDK_DIR/prebuilt/windows/bin"
                fi

                CMAKE_FILENAME=`which cmake`
                PATH="$MAKE_DIR:`dirname "$CMAKE_FILENAME"`"
                set -- -G"MinGW Makefiles" -DCMAKE_MAKE_PROGRAM="make.exe"
            #elif which ninja 2>&1 > /dev/null; then
                #set -- -G"Ninja Makefiles"
            fi

            set -- -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_FILE" "$@"
            set -- -DANDROID_NDK="$NDK_DIR" -DANDROID_ABI="$arch" "$@"
            set -- -DANDROID_NATIVE_API_LEVEL="android-9" -DANDROID_STL="stlport_static" "$@"
            set -- -DANDROID_TOOLCHAIN_NAME="arm-linux-androideabi-4.6" "$@"

            cmake "$@" $CMAKE_ARGS ../../..

            if [ "$DO_BUILD" != "0" ]; then
                cmake --build . --use-stderr -- -j$JOB_COUNT
            fi

            cd "$PROJECT_DIR"
        done
        ;;
    *)
        echo "ERROR: Invalid platform '$PLATFORM'.\n\nType \`cmakemake --help\` for usage." >&2
        exit 1
        ;;
    esac
else
    mkdir -p "$BUILD_DIR"
    cd "$BUILD_DIR"

    if [ "$OSTYPE" = "msys" ]; then
        CMAKE_FILENAME=`which cmake`
        GCC_FILENAME=`which gcc`
        PATH="`dirname "$CMAKE_FILENAME"`:`dirname "$GCC_FILENAME"`"
        set -- -G"MinGW Makefiles"
    #elif which ninja 2>&1 > /dev/null; then
        #set -- -G"Ninja Makefiles"
    fi

    cmake $@ $CMAKE_ARGS ../..

    if [ "$DO_BUILD" != "0" ]; then
        cmake --build . --use-stderr -- -j$JOB_COUNT
    fi
fi
